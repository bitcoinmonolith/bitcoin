generator client {
    provider          = "deno run -A npm:prisma-kysely"
    output            = "./generated"
    bytesTypeOverride = "Uint8Array"
}

datasource db {
    provider = "sqlite"
    url      = "file:./generated/prototype.sqlite"
}

model Block {
    blockHeight BigInt @id
    // hash is stored globally, seperately.

    version   Int
    timestamp Int
    bits      Int
    nonce     Int
    // merkleRoot is stored seperately, calculated on demand and cached

    prevHeight BigInt? @unique
    prevBlock  Block?  @relation("blockchain", fields: [prevHeight], references: [blockHeight])
    nextBlock  Block?  @relation("blockchain")

    txs Tx[]
}

model Tx {
    index       BigInt @id
    blockHeight BigInt

    version    Int
    lockTime   Int
    hasWitness Boolean

    block   Block      @relation(fields: [blockHeight], references: [blockHeight])
    inputs  TxInput[]
    outputs TxOutput[]
}

model TxOutput {
    index BigInt @id

    value        BigInt
    scriptPubKey Bytes // TODO: store seperately so its not repeated

    tx      Tx     @relation(fields: [txIndex], references: [index])
    txIndex BigInt

    spentBy TxInput? @relation("utxo")
}

model TxInput {
    index    BigInt @id
    sequence Int

    tx      Tx     @relation(fields: [txIndex], references: [index])
    txIndex BigInt

    output      TxOutput @relation("utxo", fields: [outputIndex], references: [index])
    outputIndex BigInt   @unique
    scriptSig   Bytes // TODO: maybe later just put it in the witness, if you can somehow serialize it back to exact bytes

    TxWitness TxWitness[]
}

model TxWitness {
    index        BigInt  @id
    txInput      TxInput @relation(fields: [txInputIndex], references: [index])
    txInputIndex BigInt

    data Bytes
}
